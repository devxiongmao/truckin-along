name: CI

on:
  pull_request:
  push:
    branches: [main]

# Ensure we don't run duplicate workflows on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changes: ${{ steps.filter.outputs.backend }}
      frontend_changes: ${{ steps.filter.outputs.frontend }}
      dependency_changes: ${{ steps.filter.outputs.dependencies }}
      has_labels: ${{ steps.determine-labels.outputs.has_labels }}
      labels: ${{ steps.determine-labels.outputs.labels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for git history and better file change detection

      - name: Filter changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'app/controllers/**'
              - 'app/models/**'
              - 'app/helpers/**'
              - 'app/jobs/**'
              - 'app/mailers/**'
              - 'app/services/**'
              - 'db/**'
              - 'config/**'
              - 'spec/**'
              - 'lib/**'
            frontend:
              - 'app/javascript/**'
              - 'app/assets/**'
              - 'app/views/**'
              - 'spec/javascripts/**'
              - 'importmap.rb'
            docs:
              - '**/*.md'
              - '**/*.txt'
              - '**/*.mermaid'
              - 'docs/**'
            migrations:
              - 'db/migrate/**'
            cucumber:
              - 'features/**'
            dependencies:
              - 'Gemfile.lock'
              - 'package.json'
              - 'Gemfile'
              - 'pnpm-lock.yaml'
            actions:
              - '.github/workflows/**'
              - '.github/dependabot.yml'

      - name: Determine labels based on changes
        id: determine-labels
        run: |
          # Create empty array to store labels
          declare -a LABELS=()

          if [[ "${{ steps.filter.outputs.backend }}" == "true" ]]; then
            LABELS+=("backend")
          fi

          if [[ "${{ steps.filter.outputs.frontend }}" == "true" ]]; then
            LABELS+=("frontend")
          fi

          if [[ "${{ steps.filter.outputs.migrations }}" == "true" ]]; then
            LABELS+=("migration")
          fi

          if [[ "${{ steps.filter.outputs.dependencies }}" == "true" ]]; then
            LABELS+=("dependencies")
          fi

          if [[ "${{ steps.filter.outputs.actions }}" == "true" ]]; then
            LABELS+=("github_actions")
          fi

          if [[ "${{ steps.filter.outputs.docs }}" == "true" ]]; then
            LABELS+=("documentation")
          fi

          if [[ "${{ steps.filter.outputs.cucumber }}" == "true" ]]; then
            LABELS+=("cucumber")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'Add|add|create|Create|Update|update'; then
            LABELS+=("enhancement")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq '\bfix(|es|ed|ing)\b'; then
            LABELS+=("bug")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'refactor|Refactor'; then
            LABELS+=("refactor")
          fi

          if [[ "${{ github.head_ref }}" == release-* ]]; then
            LABELS+=("release")
          fi

          # Check if we have any labels
          if [ ${#LABELS[@]} -eq 0 ]; then
            echo "has_labels=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Use newline delimiter for multiline output
          delimiter="$(openssl rand -hex 8)"
          echo "has_labels=true" >> $GITHUB_OUTPUT
          echo "labels<<$delimiter" >> $GITHUB_OUTPUT
          for label in "${LABELS[@]}"; do
            echo "$label" >> $GITHUB_OUTPUT
          done
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Add Labels to PR
        if: github.event_name == 'pull_request' && steps.determine-labels.outputs.has_labels == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = `${{ steps.determine-labels.outputs.labels }}`.trim().split('\n');
              
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  scan_ruby:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager --skip-files script/determine_app_version.rb

  scan_js:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.frontend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  test_js:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.frontend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run JavaScript tests
        run: pnpm test

  lint:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  lint_js:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.frontend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm eslint

  test:
    runs-on: ubuntu-latest
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true' || needs.analyze_changes.outputs.dependency_changes == 'true' || startsWith(github.head_ref, 'release-')
    timeout-minutes: 30
    env:
      CI: true
      DISABLE_GEOCODER: true
      RAILS_ENV: test
      # Increase test database timeout if necessary
      DATABASE_TIMEOUT: 30000

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Cache Chrome Driver
        uses: actions/cache@v4
        with:
          path: ~/.chromedriver-helper
          key: chromedriver-${{ runner.os }}

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready";
              exit 0;
            fi;
            echo "Waiting for PostgreSQL... ($i)";
            sleep 2;
          done;
          echo "PostgreSQL did not start in time";
          exit 1;

      - name: Disable Geocoder for tests
        run: |
          echo "Disabling Geocoder for CI run..."
          mkdir -p tmp
          echo "GEOCODER_DISABLED=true" >> .env.test

      - name: Setup Parallel Databases
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
          GEOCODER_DISABLED: true
        run: |
          bundle exec rake geocoder:prepare_for_seeds
          bundle exec rake parallel:create
          bundle exec rake parallel:migrate

      - name: Run Parallel RSpec Tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
        run: bundle exec parallel_test spec/ --type rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, test_js, scan_ruby, scan_js, lint, lint_js]
    if: startsWith(github.head_ref, 'release-') && success()
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-tags: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Generate Changelog
        run: |
          make generate-changelog
          echo "Changelog generated and updated."

      - name: Determine Version Number
        run: |
          make determine-app-version
          echo "App Version Determined."

      - name: Commit Changelog and Version Updates
        run: |
          TAG_NAME="v$(cat VERSION)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md VERSION
          git commit -m "Release $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          git push origin ${{ github.head_ref }}

      - name: Read Changelog
        id: read_changelog
        run: |
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          cat CHANGELOG.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: |
            ## Changelog

            ${{ env.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false

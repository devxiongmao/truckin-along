name: CI

on:
  pull_request:
  push:
    branches: [main]

# Ensure we don't run duplicate workflows on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changes: ${{ steps.filter.outputs.backend }}
      frontend_changes: ${{ steps.filter.outputs.frontend }}
      has_labels: ${{ steps.determine-labels.outputs.has_labels }}
      labels: ${{ steps.determine-labels.outputs.labels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git history and better file change detection

      - name: Filter changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'app/controllers/**'
              - 'app/models/**'
              - 'app/helpers/**'
              - 'app/jobs/**'
              - 'app/mailers/**'
              - 'db/migrate/**'
              - 'config/**'
              - 'lib/**'
              - 'Gemfile'
              - 'Gemfile.lock'
            frontend:
              - 'app/javascript/**'
              - 'app/assets/**'
              - 'app/views/**'
              - 'package.json'
              - 'yarn.lock'
              - 'importmap.rb'
            docs:
              - '**/*.md'
              - '**/*.txt'
              - '**/*.mermaid'
              - 'docs/**'

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      - name: Determine labels based on changes
        id: determine-labels
        run: |
          # Create empty array to store labels
          declare -a LABELS=()

          if [[ "${{ steps.filter.outputs.backend }}" == "true" ]]; then
            LABELS+=("backend")
          fi

          if [[ "${{ steps.filter.outputs.frontend }}" == "true" ]]; then
            LABELS+=("frontend")
          fi

          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q 'db/migrate'; then
            LABELS+=("migration")
          fi

          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q 'Gemfile.lock\|package.json\|Gemfile'; then
            LABELS+=("dependencies")
          fi

          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q '.github/workflows\|.kamal/hooks'; then
            LABELS+=("github_actions")
          fi

          if [[ "${{ steps.filter.outputs.docs }}" == "true" ]]; then
            LABELS+=("documentation")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'Add|add|create|Create'; then
            LABELS+=("enhancement")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq '\bfix(|es|ed|ing)\b'; then
            LABELS+=("bug")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'refactor|Refactor|Update|update'; then
            LABELS+=("refactor")
          fi

          if [[ "${{ github.head_ref }}" == release-* ]]; then
            LABELS+=("release")
          fi

          # Check if we have any labels
          if [ ${#LABELS[@]} -eq 0 ]; then
            echo "has_labels=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Use newline delimiter for multiline output
          delimiter="$(openssl rand -hex 8)"
          echo "has_labels=true" >> $GITHUB_OUTPUT
          echo "labels<<$delimiter" >> $GITHUB_OUTPUT
          for label in "${LABELS[@]}"; do
            echo "$label" >> $GITHUB_OUTPUT
          done
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Add Labels to PR
        if: github.event_name == 'pull_request' && steps.determine-labels.outputs.has_labels == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = `${{ steps.determine-labels.outputs.labels }}`.trim().split('\n');
              
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  scan_ruby:
    runs-on: ubuntu-latest
    # Only run if backend files changed
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager --skip-files script/determine_app_version.rb

  scan_js:
    runs-on: ubuntu-latest
    # Only run if frontend files changed
    needs: analyze_changes
    if: needs.analyze_changes.outputs.frontend_changes == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    # Only run if backend files changed
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    # Only run if backend files changed
    needs: analyze_changes
    if: needs.analyze_changes.outputs.backend_changes == 'true'
    timeout-minutes: 30
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Cache Chrome Driver
        uses: actions/cache@v4
        with:
          path: ~/.chromedriver-helper
          key: chromedriver-${{ runner.os }}

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready";
              exit 0;
            fi;
            echo "Waiting for PostgreSQL... ($i)";
            sleep 2;
          done;
          echo "PostgreSQL did not start in time";
          exit 1;

      - name: Setup Parallel Databases
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
        run: bundle exec rake parallel:setup

      - name: Run Parallel RSpec Tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
        run: bundle exec parallel_test spec/ --type rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
